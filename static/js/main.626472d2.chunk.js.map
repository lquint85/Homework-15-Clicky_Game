{"version":3,"sources":["components/Header/index.js","components/Board/index.js","image.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","className","message","score","total","Board","id","images","map","image","style","backgroundColor","color","key","index","onClick","clickHandler","App","state","clicked","handleImageClickById","imageId","_this","slice","console","log","findIndex","item","push","setState","sort","Math","random","components_Header","this","length","components_Board","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+NAaiBA,MAXjB,SAAgBC,GACZ,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,iBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWL,EAAMM,SAChCL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,SAA8BL,EAAMO,MAApC,OAA+CP,EAAMQ,QAErDP,EAAAC,EAAAC,cAAA,aCCKM,MARjB,SAAeT,GACX,OAAOC,EAAAC,EAAAC,cAAA,OAAKO,GAAG,SACdV,EAAMW,OAAOC,IAAI,SAAAC,GAAK,OACrBZ,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACC,gBAAiBF,EAAMG,OAAQX,UAAU,QAAQK,GAAI,SAAWG,EAAOI,IAAKJ,EAAMK,MAAOC,QAAS,WAAOnB,EAAMoB,aAAaP,EAAMK,cCHtIP,EAFA,CAAC,CAACK,MAAO,MAAOE,MAAO,GAAI,CAACF,MAAO,OAAQE,MAAO,GAAI,CAACF,MAAO,QAASE,MAAO,GAAI,CAACF,MAAO,SAAUE,MAAO,GAAI,CAACF,MAAO,QAASE,MAAO,ICyDvIG,6MAlDbC,MAAQ,CACNhB,QAAW,0BACXC,MAAS,EACTI,OAAUA,EACVY,QAAW,MAGbC,qBAAuB,SAACC,GACtB,IAAIF,EAAUG,EAAKJ,MAAMC,QAAQI,MAAM,GACvCC,QAAQC,IAAI,WAAYN,EAASE,IAEoB,IAAjDF,EAAQO,UAAU,SAAAC,GAAI,OAAIN,IAAYM,KACxCR,EAAQS,KAAKP,GACbC,EAAKO,SAAS,CACZV,QAAWA,EACXhB,MAASmB,EAAKJ,MAAMf,MAAQ,EAC5BD,QAAW,4BAIboB,EAAKO,SAAS,CACZ3B,QAAW,uBACXC,MAAS,EACTgB,QAAW,KAIf,IAAIZ,EAASe,EAAKJ,MAAMX,OAAOgB,MAAM,GACrChB,EAAOuB,KAAK,kBAAMC,KAAKC,SAAW,KAClCV,EAAKO,SAAS,CAACtB,WACfiB,QAAQC,IAAI,sBAAsBJ,4EAKlC,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACkC,EAAD,CACA/B,QAASgC,KAAKhB,MAAMhB,QACpBC,MAAO+B,KAAKhB,MAAMf,MAClBC,MAAO8B,KAAKhB,MAAMX,OAAO4B,SACzBtC,EAAAC,EAAAC,cAACqC,EAAD,CACE7B,OAAQ2B,KAAKhB,MAAMX,OACnBS,aAAckB,KAAKd,+BA5CXiB,aCIZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf4B,UAAUC,cAAcQ,WAK1B/B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB+B,MAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,cAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,cAAN,sBAEN1B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBW,MAAM,WACLhC,QAAQC,IACN,mEAzDAoD,CAAwBhC,GAHxBD,EAAgBC,MC7BxBiC","file":"static/js/main.626472d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n    return <>\r\n            <header>\r\n            <div className=\"title\">Click-O-Matic</div>\r\n            <div className=\"message\">{props.message}</div>\r\n            <div className=\"score\">Score {props.score} of {props.total}</div>\r\n            </header>\r\n            <br/>\r\n        </>\r\n  }\r\n  \r\n  export default Header;","import React from 'react';\r\n\r\nfunction Board(props) {\r\n    return <div id=\"board\">\r\n    {props.images.map(image => (\r\n      <div style={{backgroundColor: image.color}} className=\"image\" id={\"image-\" + image} key={image.index} onClick={() => {props.clickHandler(image.index)}} ></div>\r\n    ))}\r\n  </div>\r\n  }\r\n  \r\n  export default Board;","const images = [{color: \"red\", index: 1}, {color: \"blue\", index: 2}, {color: \"green\", index: 3}, {color: \"yellow\", index: 4}, {color: \"azure\", index: 5} ];\r\n\r\nexport default images;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport Board from \"./components/Board\"\r\nimport images from './image'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    \"message\": \"Click an image to start\",\r\n    \"score\": 0,\r\n    \"images\": images,\r\n    \"clicked\": []\r\n  };\r\n\r\n  handleImageClickById = (imageId) => {\r\n    let clicked = this.state.clicked.slice(0);\r\n    console.log(\"Checking\", clicked, imageId);\r\n    // is this imageId in clicked\r\n    if (clicked.findIndex(item => imageId === item) === -1){\r\n      clicked.push(imageId);\r\n      this.setState({\r\n        \"clicked\": clicked,\r\n        \"score\": this.state.score + 1,\r\n        \"message\": \"Good guess, keep going\"\r\n      })\r\n    } else {\r\n      // you lose, start over\r\n      this.setState({\r\n        \"message\": \"You Lose, start over\",\r\n        \"score\": 0,\r\n        \"clicked\": []\r\n      })\r\n    }\r\n    // rearrange images\r\n    let images = this.state.images.slice(0);\r\n    images.sort(() => Math.random() - 0.5);\r\n    this.setState({images});\r\n    console.log(\"handling click for \",imageId);\r\n    \r\n  } \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header \r\n        message={this.state.message}\r\n        score={this.state.score}\r\n        total={this.state.images.length} />\r\n        <Board \r\n          images={this.state.images}\r\n          clickHandler={this.handleImageClickById}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}